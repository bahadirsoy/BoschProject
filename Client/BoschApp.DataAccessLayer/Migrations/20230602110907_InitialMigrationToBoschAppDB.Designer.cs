// <auto-generated />
using BoschApp.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoschApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230602110907_InitialMigrationToBoschAppDB")]
    partial class InitialMigrationToBoschAppDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.AlanEntity.Alan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alans");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IstasyonId")
                        .HasColumnType("int");

                    b.Property<float>("Masraf")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IstasyonId");

                    b.ToTable("AltParcas");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.DepartmanEntityEntity.Departman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlanId")
                        .HasColumnType("int");

                    b.Property<float>("Butce")
                        .HasColumnType("real");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlanId");

                    b.ToTable("Departmants");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.EnjektorAltParcaEntity.EnjektorAltParca", b =>
                {
                    b.Property<int>("EnjektorId")
                        .HasColumnType("int");

                    b.Property<int>("AltParcaId")
                        .HasColumnType("int");

                    b.HasKey("EnjektorId", "AltParcaId");

                    b.HasIndex("AltParcaId");

                    b.ToTable("EnjektorAltParcas");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.EnjektorEntity.Enjektor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KisimId")
                        .HasColumnType("int");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KisimId");

                    b.ToTable("Enjektors");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.IstasyonEntity.Istasyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Istasyons");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.KisimEntity.Kisim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("KisimNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Kisims");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.SiparisEntity.Siparis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<int>("EnjektorId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisDurumu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnjektorId");

                    b.ToTable("Siparises");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.StokAlaniEntity.StokAlani", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AltParcaId")
                        .HasColumnType("int");

                    b.Property<int>("StokAdeti")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AltParcaId");

                    b.ToTable("StokAlanis");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.UretimEntity.Uretim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AltParcaId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisId")
                        .HasColumnType("int");

                    b.Property<int>("UretimDurumu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AltParcaId");

                    b.HasIndex("SiparisId");

                    b.ToTable("Uretims");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.IstasyonEntity.Istasyon", "Istasyon")
                        .WithMany("AltParcas")
                        .HasForeignKey("IstasyonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Istasyon");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.DepartmanEntityEntity.Departman", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.AlanEntity.Alan", "Alan")
                        .WithMany("Departmans")
                        .HasForeignKey("AlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alan");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.EnjektorAltParcaEntity.EnjektorAltParca", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", "AltParca")
                        .WithMany("EnjektorAltParcas")
                        .HasForeignKey("AltParcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoschApp.EntityLayer.Entities.EnjektorEntity.Enjektor", "Enjektor")
                        .WithMany("EnjektorAltParcas")
                        .HasForeignKey("EnjektorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AltParca");

                    b.Navigation("Enjektor");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.EnjektorEntity.Enjektor", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.KisimEntity.Kisim", "Kisim")
                        .WithMany("Enjektors")
                        .HasForeignKey("KisimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kisim");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.KisimEntity.Kisim", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.DepartmanEntityEntity.Departman", "Departman")
                        .WithMany("Kisims")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.SiparisEntity.Siparis", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.EnjektorEntity.Enjektor", "Enjektor")
                        .WithMany("Siparis")
                        .HasForeignKey("EnjektorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enjektor");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.StokAlaniEntity.StokAlani", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", "AltParca")
                        .WithMany("StokAlanis")
                        .HasForeignKey("AltParcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AltParca");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.UretimEntity.Uretim", b =>
                {
                    b.HasOne("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", "AltParca")
                        .WithMany("Uretims")
                        .HasForeignKey("AltParcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoschApp.EntityLayer.Entities.SiparisEntity.Siparis", "Siparis")
                        .WithMany("Uretims")
                        .HasForeignKey("SiparisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AltParca");

                    b.Navigation("Siparis");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.AlanEntity.Alan", b =>
                {
                    b.Navigation("Departmans");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.AltParcaEntity.AltParca", b =>
                {
                    b.Navigation("EnjektorAltParcas");

                    b.Navigation("StokAlanis");

                    b.Navigation("Uretims");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.DepartmanEntityEntity.Departman", b =>
                {
                    b.Navigation("Kisims");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.EnjektorEntity.Enjektor", b =>
                {
                    b.Navigation("EnjektorAltParcas");

                    b.Navigation("Siparis");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.IstasyonEntity.Istasyon", b =>
                {
                    b.Navigation("AltParcas");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.KisimEntity.Kisim", b =>
                {
                    b.Navigation("Enjektors");
                });

            modelBuilder.Entity("BoschApp.EntityLayer.Entities.SiparisEntity.Siparis", b =>
                {
                    b.Navigation("Uretims");
                });
#pragma warning restore 612, 618
        }
    }
}
